{
  "description": "Passive workflow that looks for Next-Action IDs.\nRead more: https://x.com/RhysSullivan/status/1808039883350704372",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 4
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 4
        }
      }
    ],
    "nodes": [
      {
        "alias": "passive_end",
        "definition_id": "caido/passive-end",
        "display": {
          "x": -10,
          "y": 350
        },
        "id": 1,
        "inputs": [],
        "name": "Passive End",
        "version": "0.1.0"
      },
      {
        "alias": "on_intercept_response",
        "definition_id": "caido/on-intercept-response",
        "display": {
          "x": -10,
          "y": -60
        },
        "id": 3,
        "inputs": [],
        "name": "On Intercept Response",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": -10,
          "y": 150
        },
        "id": 4,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$on_intercept_response.request",
              "kind": "ref"
            }
          },
          {
            "alias": "response",
            "value": {
              "data": "$on_intercept_response.response",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "/**\n * @param {HttpInput} input\n * @param {SDK} sdk\n * @returns {MaybePromise<Data | undefined>}\n */\nexport async function run({ request, response }, sdk) {\n  if (response) {\n    const body = response.getBody();\n    if (body) {\n      const text = body.toText();\n      const regex = /\\$\\)\\(\"([0-9a-f]{40})\"\\)/g;\n      const matches = [];\n      let match;\n      while ((match = regex.exec(text)) !== null) {\n        matches.push(match[1]);\n      }\n      if (matches.length > 0) {\n        const url = `${request.getTls() ? 'https' : 'http'}://${request.getHost()}${request.getPath()}`;\n        const result = matches.map(hash => `${hash} [${url}]`).join('\\n');\n        sdk.console.log(\"Matches:\", result);\n        \n        await sdk.findings.create({\n          title: \"Next-Action found\",\n          description: result,\n          reporter: \"Next-Actions finder\",\n          request,\n        });\n        \n        return result;\n      }\n    }\n  }\n  return undefined;\n}",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      }
    ]
  },
  "id": "603c4b85-6325-4af5-a2f5-0a59906b2520",
  "kind": "passive",
  "name": "Next-Actions Finder"
}